devtools::use_vignette("Vignette_farsR")
##### write a vignette to include in your package using knitr and R Markdown
library(devtools)
devtools::use_vignette("Vignette_farsR", "Vignette_farsR")
use_vignette("Vignette_farsR", "Vignette_farsR")
build()
load_all()
document()
?fars_map_state
use_testthat()
################################################################################
#' Read CSV file
#'
#' This function reads a csv file and returns a tibble. The function
#' returns an Error if the file cannot be found.
#'
#' @param filename Path to the csv file
#'
#' @return A tibble generated from the csv file
#'
#' @examples
#' \dontrun{
#' accident_2015 <- fars_read("data/accident_2013.csv.bz2)
#' }
#'
#' @importFrom readr read_csv
#' @importFrom deplyr tbl_df
#'
#' @export
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
################################################################################
#' Creates a filename
#'
#' This function takes a \code(year) as numeric input and returns a filname
#' in the format 'accident_year.csv.bz2'.
#'
#' @param year The year the data was obtained
#'
#' @return A string in the format 'accident_year.csv.bz2'
#' that can be used as filename
#'
#' @examples
#' \dontrun{
#' makefilename(2014)
#' }
#'
#' @export
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
################################################################################
#' Read Fars data for given years
#'
#' This function takes one or more \code(years) as an input
#' and returns a list of tibbles which for each year lists
#' the MONTH and year.
#' Returns an error if data for a given year is not found.
#'
#' @param years A list or vector of years.
#'
#' @return Returns a List of tibbles with MONTH and year of each
#' given year
#'
#' @examples
#' \dontrun{
#' fars_read_years(2013:2015)
#' }
#'
#' @importFrom deplyr mutate
#' @importFrom deplyr select
#'
#' @export
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
################################################################################
#' Summarizes Fars Data for each year
#'
#' This function takes one or more \code(years) as an input
#' and returns a tibble which summarizes the cases for each
#' given year and month.
#'
#'
#' @param years A list or vector of years.
#'
#' @return Returns a tibble with summarizes the Fars data for each
#' given year and month.
#'
#' @examples
#' \dontrun{
#' fars_summarize_years(2013:2015)
#' }
#'
#' @importFrom deplyr group_by
#' @importFrom deplyr summarize
#' @importFrom tidyr spread
#'
#' @export
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
################################################################################
#' Plots the Fars data on a US stat map
#'
#' This function takes one or more \code(years) and a US
#' \code(state.num) as input and plots the Fars data for the
#' given years on the states map. If a year or the state number
#' does not exist in the data the function will return an error.
#'
#' @param year The year the data was obtained.
#' @param state.num A number representing a US state.
#'
#' @return Returns a map with the Fars data of the given year
#' plotted to a given US states map.
#'
#' @examples
#' \dontrun{
#' fars_map_state(45,2013)
#' }
#'
#' @importFrom dplyr filter
#' @importFrom maps map
#' @importFrom graphics points
#'
#' @export
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
make_filename(2013)
make_filename("2013")
make_filename("abc")
test()
test()
format(Sys.Date(), "%Y")
make_filename <- function(year) {
year <- as.integer(year)
if(year < 0 | year > format(Sys.Date(), "%Y"))
stop("invalid year")
sprintf("accident_%d.csv.bz2", year)
}
make_filename("abc")
make_filename <- function(year) {
year <- as.integer(year)
if(year < 0 | year > as.integer(format(Sys.Date(), "%Y")))
stop("invalid year")
sprintf("accident_%d.csv.bz2", year)
}
make_filename("abc")
make_filename <- function(year) {
year <- as.integer(year)
if(!is.na(year))
stop("invalid year")
sprintf("accident_%d.csv.bz2", year)
}
make_filename("abc")
make_filename <- function(year) {
year <- as.integer(year)
if(!is.na(year)){
stop("invalid year")
}
sprintf("accident_%d.csv.bz2", year)
}
make_filename("abc")
make_filename <- function(year) {
year <- as.integer(year)
if(is.na(year)){
stop("invalid year")
}
sprintf("accident_%d.csv.bz2", year)
}
##############
make_filename("abc")
test()
make_filename <- function(year) {
if(is.na(as.integer(year))){
stop("invalid year")
}
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
test()
---
title: "Building R Package"
author: "Matt Moramarco"
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
vignette: >
%\VignetteIndexEntry{Vignette Title}
%\VignetteEngine{knitr::rmarkdown}
%\VignetteEncoding{UTF-8}
---
## Overview
This is a packge built to staisfy the requirements for the Building R Packages course on Coursera, part of the Mastering Software Development in R specialization. The specific functions in this package (detailed below) are designed to be used in reading and analyzing data from the Fatality Analysis Reporting System (part of the U.S. Department of Transporation's National Highway Traffic and Safety Administration). Details can be found [here](https://www.nhtsa.gov/research-data/fatality-analysis-reporting-system-fars)
## make_filename()
Generates filenames of the form accident_2014.csv.bz2.
```{r eval=FALSE}
make_filename(2014)
```
## fars_read()
Creates a dataframe from the filename specified.
```{r eval=FALSE}
fars_read("accident_2014.csv.bz2")
```
## fars_read_years()
Creates a dataframe for the years specified.
```{r eval=FALSE}
fars_read_years(2013:2014)
```
## fars_summarize_years()
Summarizes the data for the years specified.
```{r eval=FALSE}
fars_summarize_years(2013:2014)
```
## fars_map_state()
Generates a plot for the specified state and year.
```{r eval=FALSE}
fars_map_state('01',2014)
```
library(farsR)
document()
##### set up package
library(devtools)
document()
library(farsR)
document()
library(farsR)
library(farsR)
library(farsR)
library(farsR)
library(farsR)
##### set up the repository so that the package can be
##### checked and built on Travis
use_travis()
library(farsR)
